name: Build, Test, and Push to AWS ECR
run-name: ${{ github.actor }} is running pipelines on GitHub Actions ðŸš€

on:
  push:
    branches:
      - main

jobs:
  building-my-first-container:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the code
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 2: Configure AWS credentials
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-central-1 # Replace with your AWS region
    
    # # Step 2: Lint Dockerfile
    # - name: Lint Dockerfile with Hadolint
    #   uses: hadolint/hadolint-action@v2
    #   with:
    #     dockerfile: Dockerfile

    # - name: Analyze code with CodeQL
    #   uses: github/codeql-action/analyze@v2
    #   with:
    #     category: security

    # Step 3: Log in to Amazon ECR
    - name: Log in to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # Step 4: Build the Docker image
    - name: Build Docker image
      run: |
        IMAGE_TAG=${{ github.sha }}
        IMAGE_URI=392209090241.dkr.ecr.eu-central-1.amazonaws.com/demo-2025:${IMAGE_TAG}
        docker build -t $IMAGE_URI .

    - name: Scan Docker image for vulnerabilities
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 392209090241.dkr.ecr.eu-central-1.amazonaws.com/demo-2025:${IMAGE_TAG}

    - name: Run Unit Tests
      run: |
          # Adjust this to your project's testing setup
          npm install
          npm test

    # Step 5: Push the Docker image to Amazon ECR
    - name: Push Docker image to Amazon ECR
      run: |
        IMAGE_TAG=${{ github.sha }}
        IMAGE_URI=392209090241.dkr.ecr.eu-central-1.amazonaws.com/demo-2025:${IMAGE_TAG}
        docker push $IMAGE_URI
    
    # - name: Notify via Slack
    #   if: always() # or success() / failure()
    #   uses: slackapi/slack-github-action@v1.23.0
    #   with:
    #     slack-webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
    #   payload: '{"text": "Pipeline ${{ github.workflow }} completed with status ${{ job.status }}."}'

